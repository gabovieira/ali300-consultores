import React, { useEffect, useState } from 'react';
import { Clock, Check, Calendar, Briefcase, BookOpen, ChevronLeft, ChevronRight } from 'lucide-react';
import { Task, Requirement } from '../services/databaseService';
import { Timestamp } from 'firebase/firestore';
import { useAuth } from '../context/AuthContext';

interface WorkTimeTrackerProps {
  selectedDate: Date;
  tasks: Task[];
  requirements: Requirement[];
}

export const WorkTimeTracker: React.FC<WorkTimeTrackerProps> = ({
  selectedDate,
  tasks,
  requirements
}) => {
  const { currentUser, updateProfile } = useAuth();
  const [trainingHours, setTrainingHours] = useState<{
    description: string;
    hours: number;
    isAutoGenerated: boolean;
    hoursPerTask: number;
  } | null>(null);
  const [currentTaskIndex, setCurrentTaskIndex] = useState(0);
  const [visibleTasks, setVisibleTasks] = useState<Task[]>([]);

  // Filtrar tareas completadas para la fecha seleccionada
  const completedTasks = tasks.filter(task => {
    if (task.status !== 'completed' || !task.completionDetails?.completedAt) return false;
    
    const completedAt = task.completionDetails.completedAt instanceof Timestamp 
      ? task.completionDetails.completedAt.toDate() 
      : task.completionDetails.completedAt;
    
    return completedAt.toDateString() === selectedDate.toDateString();
  });

  // Calcular horas totales trabajadas
  const totalHours = completedTasks.reduce((total, task) => {
    const timeSpent = task.completionDetails?.timeSpent || '0';
    const hours = parseFloat(timeSpent) || 0;
    return total + hours;
  }, 0);

  // Verificar si el usuario es trainee y tiene horas de adiestramiento
  const isTrainee = currentUser?.userData?.developerLevel === 'trainee';
  const hasTrainingProgram = isTrainee && currentUser?.userData?.adiestramiento;
  const dailyTrainingHours = hasTrainingProgram ? currentUser?.userData?.horasAdiestramiento || 0 : 0;
  const workHours = 8 - dailyTrainingHours;

  // Calcular horas restantes de trabajo
  const remainingWorkHours = Math.max(workHours - totalHours, 0);
  
  // Calcular horas de adiestramiento automáticamente
  useEffect(() => {
    if (!hasTrainingProgram || completedTasks.length === 0) {
      setTrainingHours(null);
      return;
    }

    // Total de tareas completadas en el día
    const taskCount = completedTasks.length;
    
    // Distribuir las horas de adiestramiento entre las tareas completadas
    // La fórmula divide el total de horas de adiestramiento por el número de tareas
    const hoursPerTask = dailyTrainingHours / taskCount;
    
    // Generar descripción basada en las tareas completadas
    let description = 'Se recibió adiestramiento para realizar: ';
    
    // Agregar información de las tareas completadas
    completedTasks.forEach((task, index) => {
      const requirement = requirements.find(r => r.id === task.requirementId);
      
      description += `${index > 0 ? ', ' : ''}la tarea "${task.description}" del requerimiento ${requirement?.tipo || 'REQ'}: ${requirement?.name || 'Desconocido'}`;
      
      // Agregar cómo se realizó si hay detalles de completado
      if (task.completionDetails?.description) {
        description += ` (${task.completionDetails.description})`;
      }
    });

    setTrainingHours({
      description,
      hours: dailyTrainingHours,
      isAutoGenerated: true,
      hoursPerTask
    });
  }, [completedTasks, hasTrainingProgram, dailyTrainingHours, requirements]);

  // Actualizar tareas visibles cuando cambian las tareas completadas o la paginación
  useEffect(() => {
    if (completedTasks.length === 0) {
      setVisibleTasks([]);
      return;
    }
    
    // Asegurarse de que el índice actual sea válido
    if (currentTaskIndex >= completedTasks.length) {
      setCurrentTaskIndex(Math.max(0, completedTasks.length - 1));
    }
    
    // Mostrar solo la tarea actual
    setVisibleTasks([completedTasks[currentTaskIndex]]);
  }, [completedTasks, currentTaskIndex]);

  // Navegar a la tarea anterior
  const goToPreviousTask = () => {
    if (currentTaskIndex > 0) {
      setCurrentTaskIndex(currentTaskIndex - 1);
    }
  };

  // Navegar a la siguiente tarea
  const goToNextTask = () => {
    if (currentTaskIndex < completedTasks.length - 1) {
      setCurrentTaskIndex(currentTaskIndex + 1);
    }
  };

  return (
    <div className="bg-gray-800 rounded-lg p-4 shadow-md border border-gray-700">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <Clock className="w-5 h-5 text-cyan-400 mr-2" />
          <h3 className="text-white font-medium">Control de Horas</h3>
        </div>
        <div className="text-sm text-gray-400">
          {selectedDate.toLocaleDateString()}
        </div>
      </div>

      <div className="space-y-4">
        {/* Horas de Trabajo */}
        <div>
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center gap-1">
              <Briefcase className="text-cyan-400 w-4 h-4" />
              <h4 className="text-white text-sm font-medium">Horas de Trabajo</h4>
            </div>
            <div className="text-right">
              <span className="text-cyan-400 font-semibold">{totalHours.toFixed(1)}</span>
              <span className="text-gray-400 text-sm"> / {workHours.toFixed(1)}</span>
            </div>
          </div>
          <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
            <div 
              className="h-full bg-cyan-500 rounded-full"
              style={{ width: `${Math.min((totalHours / workHours) * 100, 100)}%` }}
            ></div>
          </div>
          {remainingWorkHours > 0 && (
            <div className="text-sm text-cyan-300 mt-1">
              Faltan {remainingWorkHours.toFixed(1)} horas para completar la jornada laboral
            </div>
          )}
        </div>

        {/* Horas de Adiestramiento */}
        {hasTrainingProgram && (
          <div>
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-1">
                <BookOpen className="text-purple-400 w-4 h-4" />
                <h4 className="text-white text-sm font-medium">Horas de Adiestramiento</h4>
              </div>
              <div className="text-right">
                <span className="text-purple-400 font-semibold">
                  {trainingHours ? trainingHours.hours.toFixed(1) : '0.0'}
                </span>
                <span className="text-gray-400 text-sm"> / {dailyTrainingHours.toFixed(1)}</span>
              </div>
            </div>
            <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
              <div 
                className="h-full bg-purple-500 rounded-full"
                style={{ width: `${trainingHours ? Math.min((trainingHours.hours / dailyTrainingHours) * 100, 100) : 0}%` }}
              ></div>
            </div>
            <div className="text-sm text-purple-300 mt-1">
              {trainingHours ? (
                <span className="flex items-center gap-1">
                  <Check className="text-green-400 w-3 h-3" />
                  Adiestramiento de {dailyTrainingHours} horas registrado automáticamente
                </span>
              ) : (
                completedTasks.length === 0 
                  ? 'Completa tareas para registrar horas de adiestramiento'
                  : 'Adiestramiento pendiente de actualizar'
              )}
            </div>
          </div>
        )}

        {/* Tareas Completadas Hoy */}
        <div>
          <div className="flex items-center justify-between mt-4 mb-2">
            <div className="flex items-center">
              <Check className="text-cyan-400 w-4 h-4 mr-1" />
              <h4 className="text-white text-sm font-medium">Tareas Completadas Hoy</h4>
            </div>
            {completedTasks.length > 0 && (
              <div className="text-sm text-gray-400">
                {currentTaskIndex + 1} de {completedTasks.length}
              </div>
            )}
          </div>

          {completedTasks.length === 0 ? (
            <div className="text-sm text-gray-400 p-2 bg-gray-750 rounded-md border border-gray-700">
              No hay tareas completadas para esta fecha
            </div>
          ) : (
            <div className="relative">
              <div className="space-y-2">
                {visibleTasks.map((task) => {
                  const requirement = requirements.find(r => r.id === task.requirementId);
                  const workTimeSpent = task.completionDetails?.timeSpent ? parseFloat(task.completionDetails.timeSpent) : 0;
                  
                  return (
                    <div key={task.id} className="p-3 bg-gray-750 rounded-md border border-gray-700">
                      <div className="flex items-center gap-2 mb-1">
                        <span className="px-2 py-1 rounded-full text-xs font-medium bg-gray-600 text-white">
                          {requirement?.tipo || 'REQ'}
                        </span>
                        <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-900 text-green-200">
                          Completada
                        </span>
                        <span className="text-sm font-medium text-white">{task.description}</span>
                      </div>
                      <div className="flex justify-between items-center mt-1">
                        <div className="text-xs text-gray-400">
                          se hizo {task.completionDetails?.description}
                        </div>
                        <div className="text-cyan-400 font-semibold text-sm">
                          {workTimeSpent.toFixed(1)} horas
                        </div>
                      </div>
                      
                      {isTrainee && trainingHours && trainingHours.hoursPerTask > 0 && (
                        <div className="mt-2 p-2 bg-purple-900 bg-opacity-20 rounded border border-purple-800">
                          <div className="flex justify-between items-center">
                            <div className="text-xs text-purple-300 flex items-center">
                              <BookOpen className="w-3 h-3 mr-1" />
                              Adiestramiento asociado
                            </div>
                            <div className="text-purple-400 font-semibold text-sm">
                              {trainingHours.hoursPerTask.toFixed(1)} horas
                            </div>
                          </div>
                          <div className="text-xs text-purple-300 mt-1">
                            Se recibió adiestramiento para realizar la tarea "{task.description}" del requerimiento {requirement?.tipo || 'REQ'}: {requirement?.name || ''} ({task.completionDetails?.description || ''})
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
              
              {completedTasks.length > 1 && (
                <div className="flex justify-between mt-2">
                  <button 
                    onClick={goToPreviousTask}
                    disabled={currentTaskIndex === 0}
                    className={`p-1 rounded-full hover:bg-gray-700 ${currentTaskIndex === 0 ? 'text-gray-600 cursor-not-allowed' : 'text-gray-400 hover:text-white'}`}
                  >
                    <ChevronLeft className="w-5 h-5" />
                  </button>
                  <button 
                    onClick={goToNextTask}
                    disabled={currentTaskIndex === completedTasks.length - 1}
                    className={`p-1 rounded-full hover:bg-gray-700 ${currentTaskIndex === completedTasks.length - 1 ? 'text-gray-600 cursor-not-allowed' : 'text-gray-400 hover:text-white'}`}
                  >
                    <ChevronRight className="w-5 h-5" />
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}; 