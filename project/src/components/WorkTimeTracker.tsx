import React, { useEffect, useState } from 'react';
import { Clock, Check, Calendar, Briefcase, BookOpen, ChevronLeft, ChevronRight } from 'lucide-react';
import { Task, Requirement } from '../services/databaseService';
import { Timestamp } from 'firebase/firestore';
import { useAuth } from '../context/AuthContext';

interface WorkTimeTrackerProps {
  selectedDate: Date;
  tasks: Task[];
  requirements: Requirement[];
}

export const WorkTimeTracker: React.FC<WorkTimeTrackerProps> = ({
  selectedDate,
  tasks,
  requirements
}) => {
  const { currentUser, updateProfile } = useAuth();
  const [trainingHours, setTrainingHours] = useState<{
    description: string;
    hours: number;
    isAutoGenerated: boolean;
    hoursPerTask: number;
  } | null>(null);
  const [currentTaskIndex, setCurrentTaskIndex] = useState(0);
  const [visibleTasks, setVisibleTasks] = useState<Task[]>([]);

  // Filtrar tareas completadas para la fecha seleccionada
  const completedTasks = tasks.filter(task => {
    if (task.status !== 'completed' || !task.completionDetails?.completedAt) return false;
    
    const completedAt = task.completionDetails.completedAt instanceof Timestamp 
      ? task.completionDetails.completedAt.toDate() 
      : task.completionDetails.completedAt instanceof Date
        ? task.completionDetails.completedAt
        : new Date(task.completionDetails.completedAt);
    
    return completedAt.toDateString() === selectedDate.toDateString();
  });

  // Filtrar tareas con progreso en la fecha seleccionada
  const progressTasks = tasks.filter(task => {
    if (!task.progress || task.progress.length === 0) return false;
    
    return task.progress.some(entry => {
      const entryDate = entry.date instanceof Timestamp 
        ? entry.date.toDate() 
        : entry.date instanceof Date
          ? entry.date
          : new Date(entry.date);
      
      return entryDate.toDateString() === selectedDate.toDateString();
    });
  });

  // Combinar tareas completadas y tareas con progreso, eliminando duplicados
  const allActivityTasks = [...completedTasks];
  
  progressTasks.forEach(progTask => {
    if (!allActivityTasks.some(task => task.id === progTask.id)) {
      allActivityTasks.push(progTask);
    }
  });

  // Calcular horas totales trabajadas
  const totalHours = completedTasks.reduce((total, task) => {
    const timeSpent = task.completionDetails?.timeSpent || '0';
    const hours = parseFloat(timeSpent) || 0;
    return total + hours;
  }, 0);

  // Verificar si el usuario es trainee y tiene horas de adiestramiento
  const isTrainee = currentUser?.userData?.developerLevel === 'trainee';
  const hasTrainingProgram = isTrainee && currentUser?.userData?.adiestramiento;
  const dailyTrainingHours = hasTrainingProgram ? currentUser?.userData?.horasAdiestramiento || 0 : 0;
  const workHours = 8 - dailyTrainingHours;

  // Calcular horas restantes de trabajo
  const remainingWorkHours = Math.max(workHours - totalHours, 0);
  
  // Calcular horas de adiestramiento automáticamente
  useEffect(() => {
    if (!hasTrainingProgram || completedTasks.length === 0) {
      setTrainingHours(null);
      return;
    }

    // Total de tareas completadas en el día
    const taskCount = completedTasks.length;
    
    // Distribuir las horas de adiestramiento entre las tareas completadas
    // La fórmula divide el total de horas de adiestramiento por el número de tareas
    const hoursPerTask = dailyTrainingHours / taskCount;
    
    // Generar descripción basada en las tareas completadas
    let description = 'Se recibió adiestramiento para realizar: ';
    
    // Agregar información de las tareas completadas
    completedTasks.forEach((task, index) => {
      const requirement = requirements.find(r => r.id === task.requirementId);
      
      description += `${index > 0 ? ', ' : ''}la tarea "${task.description}" del requerimiento ${requirement?.tipo || 'REQ'}: ${requirement?.name || 'Desconocido'}`;
      
      // Agregar cómo se realizó si hay detalles de completado
      if (task.completionDetails?.description) {
        description += ` (${task.completionDetails.description})`;
      }
    });

    setTrainingHours({
      description,
      hours: dailyTrainingHours,
      isAutoGenerated: true,
      hoursPerTask
    });
  }, [completedTasks, hasTrainingProgram, dailyTrainingHours, requirements]);

  // Actualizar tareas visibles cuando cambian las tareas completadas o la paginación
  useEffect(() => {
    if (allActivityTasks.length === 0) {
      setVisibleTasks([]);
      return;
    }
    
    // Asegurarse de que el índice actual sea válido
    if (currentTaskIndex >= allActivityTasks.length) {
      setCurrentTaskIndex(Math.max(0, allActivityTasks.length - 1));
    }
    
    // Mostrar solo la tarea actual
    setVisibleTasks([allActivityTasks[currentTaskIndex]]);
  }, [allActivityTasks, currentTaskIndex]);

  // Navegar a la tarea anterior
  const goToPreviousTask = () => {
    if (currentTaskIndex > 0) {
      setCurrentTaskIndex(currentTaskIndex - 1);
    }
  };

  // Navegar a la siguiente tarea
  const goToNextTask = () => {
    if (currentTaskIndex < allActivityTasks.length - 1) {
      setCurrentTaskIndex(currentTaskIndex + 1);
    }
  };

  return (
    <div className="bg-gray-800 rounded-lg p-3 sm:p-4 shadow-md border border-gray-700">
      <div className="flex items-center justify-between mb-2 sm:mb-3">
        <div className="flex items-center">
          <div className="bg-cyan-600/20 p-1.5 sm:p-2 rounded-lg mr-2">
            <Clock className="w-4 h-4 sm:w-5 sm:h-5 text-cyan-400" />
          </div>
          <h3 className="text-white font-medium text-sm sm:text-base">Control de Horas</h3>
        </div>
        <div className="text-xs sm:text-sm text-gray-400 bg-gray-700/50 px-2 py-1 rounded-lg">
          {selectedDate.toLocaleDateString()}
        </div>
      </div>

      <div className="space-y-3 sm:space-y-4">
        {/* Horas de Trabajo */}
        <div className="bg-gray-700/30 p-2 sm:p-3 rounded-lg">
          <div className="flex items-center justify-between mb-1.5 sm:mb-2">
            <div className="flex items-center gap-1">
              <Briefcase className="text-cyan-400 w-3.5 h-3.5 sm:w-4 sm:h-4" />
              <h4 className="text-white text-xs sm:text-sm font-medium">Horas de Trabajo</h4>
            </div>
            <div className="text-right">
              <span className="text-cyan-400 font-semibold text-xs sm:text-sm">{totalHours.toFixed(1)}</span>
              <span className="text-gray-400 text-xs sm:text-sm"> / {workHours.toFixed(1)}</span>
            </div>
          </div>
          <div className="h-1.5 sm:h-2 bg-gray-700 rounded-full overflow-hidden">
            <div 
              className="h-full bg-cyan-500 rounded-full"
              style={{ width: `${Math.min((totalHours / workHours) * 100, 100)}%` }}
            ></div>
          </div>
          {remainingWorkHours > 0 && (
            <div className="text-xs sm:text-sm text-cyan-300 mt-1">
              Faltan {remainingWorkHours.toFixed(1)} horas para completar la jornada laboral
            </div>
          )}
        </div>

        {/* Horas de Adiestramiento */}
        {hasTrainingProgram && (
          <div className="bg-gray-700/30 p-2 sm:p-3 rounded-lg">
            <div className="flex items-center justify-between mb-1.5 sm:mb-2">
              <div className="flex items-center gap-1">
                <BookOpen className="text-purple-400 w-3.5 h-3.5 sm:w-4 sm:h-4" />
                <h4 className="text-white text-xs sm:text-sm font-medium">Horas de Adiestramiento</h4>
              </div>
              <div className="text-right">
                <span className="text-purple-400 font-semibold text-xs sm:text-sm">
                  {trainingHours ? trainingHours.hours.toFixed(1) : '0.0'}
                </span>
                <span className="text-gray-400 text-xs sm:text-sm"> / {dailyTrainingHours.toFixed(1)}</span>
              </div>
            </div>
            <div className="h-1.5 sm:h-2 bg-gray-700 rounded-full overflow-hidden">
              <div 
                className="h-full bg-purple-500 rounded-full"
                style={{ width: `${trainingHours ? Math.min((trainingHours.hours / dailyTrainingHours) * 100, 100) : 0}%` }}
              ></div>
            </div>
            <div className="text-xs sm:text-sm text-purple-300 mt-1">
              {trainingHours ? (
                <span className="flex items-center gap-1">
                  <Check className="text-green-400 w-3 h-3" />
                  Adiestramiento de {dailyTrainingHours} horas registrado automáticamente
                </span>
              ) : (
                completedTasks.length === 0 
                  ? 'Completa tareas para registrar horas de adiestramiento'
                  : 'Adiestramiento pendiente de actualizar'
              )}
            </div>
          </div>
        )}

        {/* Tareas Completadas */}
        <div className="bg-gray-700/30 p-2 sm:p-3 rounded-lg">
          <div className="flex items-center justify-between mb-1.5 sm:mb-2">
            <div className="flex items-center gap-1">
              <Clock className="text-cyan-400 w-3.5 h-3.5 sm:w-4 sm:h-4 flex-shrink-0" />
              <h4 className="text-white text-xs sm:text-sm font-medium truncate">
                Actividad del Día ({allActivityTasks.length})
              </h4>
            </div>
            {allActivityTasks.length > 0 && (
              <div className="flex items-center gap-1 sm:gap-2">
                <button
                  onClick={goToPreviousTask}
                  disabled={currentTaskIndex === 0}
                  className={`p-1 rounded-full ${
                    currentTaskIndex === 0
                      ? 'text-gray-600 cursor-not-allowed'
                      : 'text-gray-400 hover:text-white hover:bg-gray-700'
                  }`}
                >
                  <ChevronLeft className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                </button>
                <span className="text-gray-400 text-xs sm:text-sm">
                  {currentTaskIndex + 1} / {allActivityTasks.length}
                </span>
                <button
                  onClick={goToNextTask}
                  disabled={currentTaskIndex === allActivityTasks.length - 1}
                  className={`p-1 rounded-full ${
                    currentTaskIndex === allActivityTasks.length - 1
                      ? 'text-gray-600 cursor-not-allowed'
                      : 'text-gray-400 hover:text-white hover:bg-gray-700'
                  }`}
                >
                  <ChevronRight className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                </button>
              </div>
            )}
          </div>

          {visibleTasks.length > 0 ? (
            <div className="space-y-2">
              {visibleTasks.map(task => {
                const requirement = requirements.find(r => r.id === task.requirementId);
                
                // Encontrar entradas de progreso para la fecha seleccionada
                const todaysProgress = task.progress?.filter(entry => {
                  const entryDate = entry.date instanceof Timestamp 
                    ? entry.date.toDate() 
                    : entry.date instanceof Date
                      ? entry.date
                      : new Date(entry.date);
                  
                  return entryDate.toDateString() === selectedDate.toDateString();
                });
                
                return (
                  <div key={task.id} className="bg-gray-700/70 rounded-lg p-2 sm:p-3">
                    <div className="flex items-start justify-between gap-2">
                      <div className="flex-1 min-w-0">
                        <h5 className="text-white text-xs sm:text-sm font-medium mb-0.5 sm:mb-1 truncate">
                          {task.description}
                        </h5>
                        <p className="text-gray-400 text-xs truncate">
                          {requirement?.tipo}: {requirement?.name}
                        </p>
                      </div>
                      <div className={`px-2 py-0.5 text-[10px] sm:text-xs rounded-full flex-shrink-0 ${
                        task.status === 'completed' 
                          ? 'bg-green-900/50 text-green-400' 
                          : 'bg-blue-900/50 text-blue-400'
                      }`}>
                        {task.status === 'completed' ? 'Completada' : 'En Progreso'}
                      </div>
                    </div>

                    {/* Mostrar detalles de tareas completadas */}
                    {task.status === 'completed' && task.completionDetails && (
                      <div className="mt-2 text-xs border-l-2 border-green-700 pl-2">
                        <p className="text-gray-300">{task.completionDetails.description}</p>
                        <div className="mt-1 flex flex-wrap gap-x-3 gap-y-1">
                          <span className="text-gray-400">
                            Tiempo: {task.completionDetails.timeSpent}
                          </span>
                          {task.completionDetails.tools && task.completionDetails.tools.length > 0 && (
                            <div className="flex flex-wrap gap-1 mt-1 w-full">
                              <span className="text-gray-400">Objetos:</span>
                              {task.completionDetails.tools.map((tool, idx) => (
                                <span key={idx} className="bg-gray-600/50 text-gray-300 text-[10px] px-1.5 py-0.5 rounded-full">
                                  {tool}
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                    
                    {/* Mostrar detalles de progreso */}
                    {todaysProgress && todaysProgress.length > 0 && (
                      <div className="mt-2">
                        {todaysProgress.map((progress, idx) => (
                          <div key={idx} className="text-xs border-l-2 border-blue-700 pl-2 mb-2">
                            <p className="text-gray-300">{progress.description}</p>
                            <span className="text-gray-400">
                              Tiempo: {progress.timeSpent}
                            </span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          ) : (
            <div className="bg-gray-700/70 rounded-lg p-2 sm:p-3 text-center text-gray-400 text-xs sm:text-sm">
              No hay actividad registrada para esta fecha
            </div>
          )}
        </div>
      </div>
    </div>
  );
}; 